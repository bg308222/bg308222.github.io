{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["chartSize","value","window","innerWidth","content","innerHeight","originState","toCurrency","input","toFixed","split","integer","fraction","replace","handleTextChange","setter","e","target","replaceAll","isNaN","App","useState","shortTermInitialMoney","setShortTermInitialMoney","shortTermMonthRate","setShortTermMonthRate","shortTermCriticalPoint","setShortTermCriticalPoint","longTermInitialMoney","setLongTermInitialMoney","longTermYearRate","setLongTermYearRate","speed","setSpeed","increaseDay","setIncreaseDay","isTick","setIsTick","isShowLongTermLine","setIsShowLongTermLine","isShowShortTermLine","setIsShowShortTermLine","shortTermBiggerThanLongTerm","useRef","shortTermBiggerThanLongTermMoney","shortTermBiggerThanCriticalPoint","longTermBiggerThanShortTerm","longTermBiggerThanShortTermMoney","currentDay","interval","shortTermCurrentMoney","longTermCurrentMoney","day","long","short","diff","datas","setDatas","resetChart","useCallback","current","undefined","clearInterval","longShortTermDatas","longTermDayRate","Math","pow","shortTermDayRate","arr","Array","map","result","abs","length","slice","useEffect","LineChart","width","height","data","margin","left","Tooltip","formatter","key","XAxis","dataKey","YAxis","tickFormatter","match","Legend","verticalAlign","Line","type","stroke","checked","onChange","onClick","setInterval","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6e5c177.chunk.js","sourcesContent":["import React, {\r\n  Fragment,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { LineChart, XAxis, YAxis, Legend, Line, Tooltip } from \"recharts\";\r\n\r\nconst chartSize = {\r\n  width: {\r\n    value: window.innerWidth,\r\n    content: 0.95,\r\n  },\r\n  height: {\r\n    value: window.innerHeight,\r\n    content: 0.75,\r\n  },\r\n};\r\n\r\nconst originState = {\r\n  shortTermInitialMoney: 1,\r\n  shortTermMonthRate: 2,\r\n  shortTermCriticalPoint: 10000000,\r\n  longTermInitialMoney: 30000000,\r\n  longTermYearRate: 1.2,\r\n  speed: 5,\r\n  increaseDay: 5,\r\n  isShowLongTermLine: true,\r\n  isShowShortTermLine: true,\r\n};\r\n\r\nconst toCurrency = (input: number) => {\r\n  const [integer, fraction] = input.toFixed(2).split(\".\");\r\n  return `${integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}${\r\n    +fraction !== 0 ? \".\" + fraction : \"\"\r\n  }`;\r\n};\r\n\r\nconst handleTextChange = (\r\n  setter: any,\r\n  e: React.ChangeEvent<HTMLInputElement>\r\n) => {\r\n  const value = e.target.value.replaceAll(\",\", \"\") as string;\r\n  if (!isNaN(+value)) setter(+value === 0 ? 1 : +value);\r\n};\r\n\r\nfunction App() {\r\n  const [shortTermInitialMoney, setShortTermInitialMoney] = useState(\r\n    originState.shortTermInitialMoney\r\n  );\r\n  const [shortTermMonthRate, setShortTermMonthRate] = useState(\r\n    originState.shortTermMonthRate\r\n  );\r\n  const [shortTermCriticalPoint, setShortTermCriticalPoint] = useState(\r\n    10000000\r\n  );\r\n\r\n  const [longTermInitialMoney, setLongTermInitialMoney] = useState(\r\n    originState.longTermInitialMoney\r\n  );\r\n  const [longTermYearRate, setLongTermYearRate] = useState(\r\n    originState.longTermYearRate\r\n  );\r\n\r\n  const [speed, setSpeed] = useState(originState.speed);\r\n  const [increaseDay, setIncreaseDay] = useState(originState.increaseDay);\r\n  const [isTick, setIsTick] = useState(false);\r\n  const [isShowLongTermLine, setIsShowLongTermLine] = useState(\r\n    originState.isShowLongTermLine\r\n  );\r\n  const [isShowShortTermLine, setIsShowShortTermLine] = useState(\r\n    originState.isShowShortTermLine\r\n  );\r\n\r\n  const shortTermBiggerThanLongTerm = useRef<number>();\r\n  const shortTermBiggerThanLongTermMoney = useRef<number>(0);\r\n  const shortTermBiggerThanCriticalPoint = useRef<number>();\r\n  const longTermBiggerThanShortTerm = useRef<number>();\r\n  const longTermBiggerThanShortTermMoney = useRef<number>(0);\r\n  const currentDay = useRef(1);\r\n  const interval = useRef<NodeJS.Timeout>();\r\n  const shortTermCurrentMoney = useRef(shortTermInitialMoney);\r\n  const longTermCurrentMoney = useRef(longTermInitialMoney);\r\n\r\n  const [datas, setDatas] = useState<\r\n    { day: number; long: number; short: number, diff: number }[]\r\n  >([{ day: 0, long: longTermInitialMoney, short: shortTermInitialMoney, diff: 0 }]);\r\n\r\n  const resetChart = useCallback(() => {\r\n    shortTermBiggerThanLongTerm.current = undefined;\r\n    shortTermBiggerThanCriticalPoint.current = undefined;\r\n    longTermBiggerThanShortTerm.current = undefined;\r\n    shortTermCurrentMoney.current = shortTermInitialMoney;\r\n    longTermCurrentMoney.current = longTermInitialMoney;\r\n    currentDay.current = 1;\r\n    if (interval.current) clearInterval(interval.current);\r\n    setDatas([\r\n      { day: 0, long: longTermInitialMoney, short: shortTermInitialMoney, diff: 0 },\r\n    ]);\r\n  }, [longTermInitialMoney, shortTermInitialMoney]);\r\n\r\n  const longShortTermDatas = useCallback(() => {\r\n    const longTermDayRate = Math.pow(longTermYearRate, 1 / 365);\r\n    const shortTermDayRate = Math.pow(shortTermMonthRate, 1 / 30);\r\n    const arr = [...new Array(increaseDay)].map(() => {\r\n      longTermCurrentMoney.current *= longTermDayRate;\r\n      if (shortTermCurrentMoney.current > shortTermCriticalPoint) {\r\n        shortTermCurrentMoney.current +=\r\n          shortTermCriticalPoint * (shortTermDayRate - 1);\r\n      } else {\r\n        shortTermCurrentMoney.current *= shortTermDayRate;\r\n      }\r\n      const result = {\r\n        day: currentDay.current++,\r\n        short: shortTermCurrentMoney.current,\r\n        long: longTermCurrentMoney.current,\r\n        diff: Math.abs(longTermCurrentMoney.current - shortTermCurrentMoney.current)\r\n      };\r\n      if (\r\n        !longTermBiggerThanShortTerm.current &&\r\n        shortTermBiggerThanLongTerm.current &&\r\n        result.long > result.short\r\n      ) {\r\n        longTermBiggerThanShortTerm.current = result.day;\r\n        longTermBiggerThanShortTermMoney.current = result.long;\r\n      }\r\n      if (!shortTermBiggerThanLongTerm.current && result.long < result.short) {\r\n        shortTermBiggerThanLongTerm.current = result.day;\r\n        shortTermBiggerThanLongTermMoney.current = result.short;\r\n      }\r\n      if (\r\n        !shortTermBiggerThanCriticalPoint.current &&\r\n        result.short > shortTermCriticalPoint\r\n      ) {\r\n        shortTermBiggerThanCriticalPoint.current = result.day;\r\n      }\r\n      return result;\r\n    });\r\n\r\n    setDatas(\r\n      datas.length < 1500\r\n        ? [...datas, ...arr]\r\n        : [...datas.slice(increaseDay - datas.length), ...arr]\r\n    );\r\n  }, [\r\n    datas,\r\n    increaseDay,\r\n    longTermYearRate,\r\n    shortTermCriticalPoint,\r\n    shortTermMonthRate,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    resetChart();\r\n  }, [\r\n    longTermInitialMoney,\r\n    shortTermInitialMoney,\r\n    longTermYearRate,\r\n    shortTermMonthRate,\r\n    shortTermCriticalPoint,\r\n    resetChart,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (isTick) {\r\n      longShortTermDatas();\r\n      setIsTick(false);\r\n    }\r\n  }, [isTick, longShortTermDatas]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <LineChart\r\n        width={chartSize.width.value * chartSize.width.content}\r\n        height={chartSize.height.value * chartSize.height.content}\r\n        data={datas}\r\n        margin={{\r\n          left: chartSize.width.value * (1 - chartSize.width.content),\r\n        }}\r\n      >\r\n        <Tooltip\r\n          formatter={(value: number, key: string) => {\r\n            return toCurrency(value);\r\n          }}\r\n        />\r\n        <XAxis dataKey=\"day\" />\r\n        <YAxis\r\n          tickFormatter={(value) => {\r\n            if (`${value}`.match(\"e\")) {\r\n              return value;\r\n            }\r\n            return `${toCurrency(value)}`;\r\n          }}\r\n        />\r\n        <Legend verticalAlign=\"top\" />\r\n        {isShowLongTermLine && (\r\n          <Line type=\"monotone\" dataKey=\"long\" stroke=\"#8884d8\" />\r\n        )}\r\n        {isShowShortTermLine && (\r\n          <Line type=\"monotone\" dataKey=\"short\" stroke=\"#82ca9d\" />\r\n        )}\r\n        {isShowLongTermLine && isShowShortTermLine && (\r\n          <Line type=\"monotone\" dataKey=\"diff\" stroke=\"#ff0000\" />\r\n        )}\r\n      </LineChart>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={isShowLongTermLine}\r\n          onChange={(e) => {\r\n            setIsShowLongTermLine(e.target.checked);\r\n          }}\r\n        />\r\n        顯示長線圖\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={isShowShortTermLine}\r\n          onChange={(e) => {\r\n            setIsShowShortTermLine(e.target.checked);\r\n          }}\r\n        />\r\n        顯示短線圖\r\n      </label>\r\n      <br />\r\n      <label>\r\n        長線起始金額\r\n        <input\r\n          type=\"text\"\r\n          value={toCurrency(longTermInitialMoney)}\r\n          onChange={(e) => {\r\n            handleTextChange(setLongTermInitialMoney, e);\r\n          }}\r\n        />\r\n      </label>\r\n      <label>\r\n        長線年報酬(倍)\r\n        <input\r\n          type=\"text\"\r\n          value={toCurrency(longTermYearRate)}\r\n          onChange={(e) => {\r\n            handleTextChange(setLongTermYearRate, e);\r\n          }}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        短線起始金額\r\n        <input\r\n          type=\"text\"\r\n          value={toCurrency(shortTermInitialMoney)}\r\n          onChange={(e) => {\r\n            handleTextChange(setShortTermInitialMoney, e);\r\n          }}\r\n        />\r\n      </label>\r\n      <label>\r\n        短線月報酬(倍)\r\n        <input\r\n          type=\"text\"\r\n          value={toCurrency(shortTermMonthRate)}\r\n          onChange={(e) => {\r\n            handleTextChange(setShortTermMonthRate, e);\r\n          }}\r\n        />\r\n      </label>\r\n      <label>\r\n        短線臨界金額\r\n        <input\r\n          type=\"text\"\r\n          value={toCurrency(shortTermCriticalPoint)}\r\n          onChange={(e) => {\r\n            handleTextChange(setShortTermCriticalPoint, e);\r\n          }}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        速度(波/秒)\r\n        <input\r\n          type=\"text\"\r\n          value={toCurrency(speed)}\r\n          onChange={(e) => {\r\n            handleTextChange(setSpeed, e);\r\n          }}\r\n        />\r\n      </label>\r\n      <label>\r\n        遞增(日/波)\r\n        <input\r\n          type=\"text\"\r\n          value={toCurrency(increaseDay)}\r\n          onChange={(e) => {\r\n            handleTextChange(setIncreaseDay, e);\r\n          }}\r\n        />\r\n      </label>\r\n      <button\r\n        onClick={() => {\r\n          if (interval.current) clearInterval(interval.current);\r\n          interval.current = setInterval(() => {\r\n            setIsTick(true);\r\n          }, 1000 / speed);\r\n        }}\r\n      >\r\n        開始\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          if (interval.current) clearInterval(interval.current);\r\n        }}\r\n      >\r\n        暫停\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          resetChart();\r\n        }}\r\n      >\r\n        重新(僅重設圖表)\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setIncreaseDay(originState.increaseDay);\r\n          setLongTermInitialMoney(originState.longTermInitialMoney);\r\n          setLongTermYearRate(originState.longTermYearRate);\r\n          setShortTermCriticalPoint(originState.shortTermCriticalPoint);\r\n          setShortTermInitialMoney(originState.shortTermInitialMoney);\r\n          setShortTermMonthRate(originState.shortTermMonthRate);\r\n          setSpeed(originState.speed);\r\n          setIsShowLongTermLine(originState.isShowLongTermLine);\r\n          setIsShowShortTermLine(originState.isShowShortTermLine);\r\n          resetChart();\r\n        }}\r\n      >\r\n        重置(回復原始設定與重設圖表)\r\n      </button>\r\n      <div>\r\n        長線目前金額: {toCurrency(longTermCurrentMoney.current)}\r\n        {`(${toCurrency(\r\n          ((longTermCurrentMoney.current - longTermInitialMoney) /\r\n            longTermInitialMoney) *\r\n            100\r\n        )}%)`}\r\n        <span style={{ color: \"red\" }}>\r\n          {longTermBiggerThanShortTerm.current\r\n            ? `(於${\r\n                longTermBiggerThanShortTerm.current\r\n              }日後超過短線金額${toCurrency(\r\n                longTermBiggerThanShortTermMoney.current\r\n              )})`\r\n            : \"\"}\r\n        </span>\r\n      </div>\r\n      <div>\r\n        短線目前金額: {toCurrency(shortTermCurrentMoney.current)}\r\n        {`(${toCurrency(\r\n          ((shortTermCurrentMoney.current - shortTermInitialMoney) /\r\n            shortTermInitialMoney) *\r\n            100\r\n        )}%)`}\r\n        <span style={{ color: \"red\" }}>\r\n          {shortTermBiggerThanLongTerm.current\r\n            ? `(於${\r\n                shortTermBiggerThanLongTerm.current\r\n              }日後超過長線金額${toCurrency(\r\n                shortTermBiggerThanLongTermMoney.current\r\n              )})`\r\n            : \"\"}\r\n        </span>\r\n        <span style={{ color: \"blue\" }}>\r\n          {shortTermBiggerThanCriticalPoint.current\r\n            ? \"(於\" +\r\n              shortTermBiggerThanCriticalPoint.current +\r\n              \"日後超過臨界金額)\"\r\n            : \"\"}\r\n        </span>\r\n      </div>\r\n      <div>經過幾年: {toCurrency(currentDay.current / 365)}</div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}